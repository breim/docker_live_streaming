user www-data;

# Nginx conf
events {
    worker_connections  1024;
}

## HLS server streaming
rtmp {
    server {
      listen 1935; # Listen on standard RTMP port
      chunk_size 4000;
      
      application live{
        live on;

        on_publish http://localhost:3000/callbacks/live_streamings/on_publish;
        on_publish_done http://localhost:3000/callbacks/live_streamings/on_done;
                
        allow publish all;
        allow play all;
        meta copy;
        sync 100ms;
        interleave on;
        wait_key on;
        wait_video on;
        drop_idle_publisher 15s;
        notify_update_timeout 10s;
        notify_method get;
        publish_notify on;
        idle_streams on;
          
        # FFMPEG Convertion
        exec ffmpeg -i rtmp://localhost:1935/$app/$name  -async 1 -vsync -1 
                       -c:v h264 -c:a aac -b:v 600k -b:a 96k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 2 -crf 23 -f flv rtmp://localhost:1935/show/${name}_480
                       -c:v h264 -c:a aac -b:v 1200k -b:a 128k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 2 -crf 23 -f flv rtmp://localhost:1935/show/${name}_720
                       -c:v h264 -c:a aac -b:v 4000k -b:a 192k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 2 -crf 23 -f flv rtmp://localhost:1935/show/${name}_1080;

        recorder preview {
          record keyframes;
          record_path /data/app/hls;
          record_max_frames 10;
          record_interval 5s;
          exec_record_done ffmpeg -i rtmp://localhost:1935/$app/$name -vcodec png -vframes 1 -an -f rawvideo -ss 00:00:01 -y /data/app/hls/$name.png;
        }
    }

    application show {
      live on;
      hls on;

      # Allow everyone to publish (if they pass our stream validation)
      allow publish all;

      # Allow everyone to playback (really only for the server, specification to come)
      allow play all;

      hls_type live;
      hls_sync 100ms;

      # hls_fragment_naming system;
      hls_fragment_slicing plain;                
  
      hls_path /data/app/hls;
      hls_fragment 2s;
      hls_playlist_length 10s;
      hls_nested off;
      meta copy;

        
      # HLS Variants, dictating master m3u8 playlist file
      hls_fragment_naming timestamp;
      hls_variant _480 BANDWIDTH=1200000,RESOLUTION=842x480;
      hls_variant _720 BANDWIDTH=2200000,RESOLUTION=1280x720;
      hls_variant _1080 BANDWIDTH=4000000,RESOLUTION=1920x1080;

    }
  }
}

#end hls server stream

http {
  sendfile off;
  tcp_nopush on;
  directio 512;
  default_type application/octet-stream;

  server {
    listen 80;

    server_name localhost;

    location /hls {
  
      # Prevent access direct files via get change localhos to your main domain 
      if ( $http_referer !~* 'localhost' ) {
        return 404;
      }

      # Disable cache
      add_header Cache-Control no-cache;

      # CORS setup
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length';

      # allow CORS preflight requests
      if ($request_method = 'OPTIONS') {
          add_header 'Access-Control-Allow-Origin' '*';
          add_header 'Access-Control-Max-Age' 1728000;
          add_header 'Content-Type' 'text/plain charset=UTF-8';
          add_header 'Content-Length' 0;
          return 204;
      }

      types {
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;
      }

      root /data/app;
    }
  }
}
